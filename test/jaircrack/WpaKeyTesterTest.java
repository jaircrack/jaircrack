package jaircrack;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import java.io.UnsupportedEncodingException;
import java.util.Random;

import org.junit.Ignore;
import org.junit.Test;


public class WpaKeyTesterTest {

	@Test
	public void testV1Key() throws UnsupportedEncodingException {
		ApInfo apInfo = new ApInfo();

		apInfo.bssid = new byte[] { 0, 13, (byte)147, (byte)235, (byte)176, (byte)140 };
		apInfo.essid = "test".getBytes("ASCII");
		apInfo.wpa = new Wpa();

		apInfo.wpa.keyver = 1;

		apInfo.wpa.anonce = new byte[] {
				0x54, (byte)0xad, (byte)0xc6, 0x44, (byte)0x96, 0x6d, (byte)0xc8, 0x42,
				0x3d, 0x44, 0x36, 0x4a, 0x1d, (byte)0xe9, (byte)0xec, 0x22,
				0x41, 0x55, 0x22, (byte)0xbd, 0x05, 0x55, (byte)0xee, 0x71,
				(byte)0x8f, (byte)0x8a, 0x53, (byte)0xb8, (byte)0xd6, 0x79, 0x47, 0x0c
		};

		apInfo.wpa.snonce = new byte[] {
				(byte) 0xfe, 0x5f, 0xc, 0x5b, 0x54, 0x23, (byte) 0x81, 0x5f,
				0x35, (byte) 0xfe, 0x60, 0x67, 0x20, (byte) 0xbb, (byte) 0xb9, 0x46,
				0x6d, (byte) 0x86, 0x1, (byte) 0xa8, (byte) 0xb4, 0x49, 0x3a, (byte) 0xf4,
				(byte) 0xcf, 0x5a, 0x3, 0x17, (byte) 0xf3, (byte) 0x8c, (byte) 0x83, (byte) 0x87
		};

		apInfo.wpa.eapol = new byte[] {
				0x1, 0x3, 0x0, 0x77, (byte) 0xfe, 0x1, 0x9, 0x0,
				0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
				0x0, (byte) 0xfe, 0x5f, 0xc, 0x5b, 0x54, 0x23, (byte) 0x81,
				0x5f, 0x35, (byte) 0xfe, 0x60, 0x67, 0x20, (byte) 0xbb, (byte) 0xb9,
				0x46, 0x6d, (byte) 0x86, 0x1, (byte) 0xa8, (byte) 0xb4, 0x49, 0x3a,
				(byte) 0xf4, (byte) 0xcf, 0x5a, 0x3, 0x17, (byte) 0xf3, (byte) 0x8c, (byte) 0x83,
				(byte) 0x87, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x18, (byte) 0xdd, 0x16, 0x0, 0x50, (byte) 0xf2,
				0x1, 0x1, 0x0, 0x0, 0x50, (byte) 0xf2, 0x2, 0x1,
				0x0, 0x0, 0x50, (byte) 0xf2, 0x2, 0x1, 0x0, 0x0,
				0x50, (byte) 0xf2, 0x2,
		};

		apInfo.wpa.keymic = new byte[] {
				0x28, (byte) 0xa8, (byte) 0xc8, (byte) 0x95, (byte) 0xb7, 0x17, (byte) 0xe5, 0x72,
				0x27, (byte) 0xb6, (byte) 0xa7, (byte) 0xee, (byte) 0xe3, (byte) 0xe5, 0x34, 0x45
		};

		apInfo.wpa.stmac = new byte[] { 0x0, 0x9, 0x5b, (byte) 0x91, 0x53, 0x5d };

		WpaKeyTester tester = new WpaKeyTester(apInfo);

		assertEquals(123, apInfo.wpa.eapol.length);
		assertFalse(tester.testKey("password".getBytes("ASCII")));
		assertTrue(tester.testKey("biscotte".getBytes("ASCII")));
	}

	@Test
	public void testV2Key() throws UnsupportedEncodingException {
		ApInfo apInfo = new ApInfo();

		apInfo.bssid = new byte[] {0x0, 0x14, 0x6c, 0x7e, 0x40, (byte) 0x80};
		apInfo.essid = "Harkonen".getBytes("ASCII");
		apInfo.wpa = new Wpa();

		apInfo.wpa.keyver = 2;

		apInfo.wpa.anonce = new byte[] {
				0x22, 0x58, 0x54, (byte) 0xb0, 0x44, 0x4d, (byte) 0xe3, (byte) 0xaf,
				0x6, (byte) 0xd1, 0x49, 0x2b, (byte) 0x85, 0x29, (byte) 0x84, (byte) 0xf0,
				0x4c, (byte) 0xf6, 0x27, 0x4c, 0xe, 0x32, 0x18, (byte) 0xb8,
				0x68, 0x17, 0x56, (byte) 0x86, 0x4d, (byte) 0xb7, (byte) 0xa0, 0x55
		};

		apInfo.wpa.snonce = new byte[] {
				0x59, 0x16, (byte) 0x8b, (byte) 0xc3, (byte) 0xa5, (byte) 0xdf, 0x18, (byte) 0xd7,
				0x1e, (byte) 0xfb, 0x64, 0x23, (byte) 0xf3, 0x40, 0x8, (byte) 0x8d,
				(byte) 0xab, (byte) 0x9e, 0x1b, (byte) 0xa2, (byte) 0xbb, (byte) 0xc5, (byte) 0x86, 0x59,
				(byte) 0xe0, 0x7b, 0x37, 0x64, (byte) 0xb0, (byte) 0xde, (byte) 0x85, 0x70
		};

		apInfo.wpa.eapol = new byte[] {
				0x1, 0x3, 0x0, 0x75, 0x2, 0x1, 0xa, 0x0, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x1, 0x59, 0x16, (byte) 0x8b, (byte) 0xc3, (byte) 0xa5, (byte) 0xdf, 0x18, (byte) 0xd7, 0x1e, (byte) 0xfb,
				0x64, 0x23, (byte) 0xf3, 0x40, 0x8, (byte) 0x8d, (byte) 0xab, (byte) 0x9e, 0x1b, (byte) 0xa2, (byte) 0xbb, (byte) 0xc5,
				(byte) 0x86, 0x59, (byte) 0xe0, 0x7b, 0x37, 0x64, (byte) 0xb0, (byte) 0xde, (byte) 0x85, 0x70, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
				0x0, 0x16, 0x30, 0x14, 0x1, 0x0, 0x0, 0xf, (byte) 0xac, 0x4, 0x1, 0x0, 0x0, 0xf,
				(byte) 0xac, 0x4, 0x1, 0x0, 0x0, 0xf, (byte) 0xac, 0x2, 0x1, 0x0,
		};

		apInfo.wpa.keymic = new byte[] {
				(byte) 0xd5, 0x35, 0x53, (byte) 0x82, (byte) 0xb8, (byte) 0xa9, (byte) 0xb8, 0x6,
				(byte) 0xdc, (byte) 0xaf, (byte) 0x99, (byte) 0xcd, (byte) 0xaf, 0x56, 0x4e, (byte) 0xb6
		};

		apInfo.wpa.stmac = new byte[] {0x0, 0x13, 0x46, (byte) 0xfe, 0x32, 0xc};

		WpaKeyTester tester = new WpaKeyTester(apInfo);

		assertEquals(121, apInfo.wpa.eapol.length);
		assertFalse(tester.testKey("password".getBytes("ASCII")));
		assertTrue(tester.testKey("12345678".getBytes("ASCII")));
	}
	
	@Ignore
	@Test
	public void testPerformance() throws UnsupportedEncodingException {
		ApInfo apInfo = new ApInfo();

		apInfo.bssid = new byte[] {0x0, 0x14, 0x6c, 0x7e, 0x40, (byte) 0x80};
		apInfo.essid = "Harkonen".getBytes("ASCII");
		apInfo.wpa = new Wpa();

		apInfo.wpa.keyver = 2;

		apInfo.wpa.anonce = new byte[] {
				0x22, 0x58, 0x54, (byte) 0xb0, 0x44, 0x4d, (byte) 0xe3, (byte) 0xaf,
				0x6, (byte) 0xd1, 0x49, 0x2b, (byte) 0x85, 0x29, (byte) 0x84, (byte) 0xf0,
				0x4c, (byte) 0xf6, 0x27, 0x4c, 0xe, 0x32, 0x18, (byte) 0xb8,
				0x68, 0x17, 0x56, (byte) 0x86, 0x4d, (byte) 0xb7, (byte) 0xa0, 0x55
		};

		apInfo.wpa.snonce = new byte[] {
				0x59, 0x16, (byte) 0x8b, (byte) 0xc3, (byte) 0xa5, (byte) 0xdf, 0x18, (byte) 0xd7,
				0x1e, (byte) 0xfb, 0x64, 0x23, (byte) 0xf3, 0x40, 0x8, (byte) 0x8d,
				(byte) 0xab, (byte) 0x9e, 0x1b, (byte) 0xa2, (byte) 0xbb, (byte) 0xc5, (byte) 0x86, 0x59,
				(byte) 0xe0, 0x7b, 0x37, 0x64, (byte) 0xb0, (byte) 0xde, (byte) 0x85, 0x70
		};

		apInfo.wpa.eapol = new byte[] {
				0x1, 0x3, 0x0, 0x75, 0x2, 0x1, 0xa, 0x0, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x1, 0x59, 0x16, (byte) 0x8b, (byte) 0xc3, (byte) 0xa5, (byte) 0xdf, 0x18, (byte) 0xd7, 0x1e, (byte) 0xfb,
				0x64, 0x23, (byte) 0xf3, 0x40, 0x8, (byte) 0x8d, (byte) 0xab, (byte) 0x9e, 0x1b, (byte) 0xa2, (byte) 0xbb, (byte) 0xc5,
				(byte) 0x86, 0x59, (byte) 0xe0, 0x7b, 0x37, 0x64, (byte) 0xb0, (byte) 0xde, (byte) 0x85, 0x70, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
				0x0, 0x16, 0x30, 0x14, 0x1, 0x0, 0x0, 0xf, (byte) 0xac, 0x4, 0x1, 0x0, 0x0, 0xf,
				(byte) 0xac, 0x4, 0x1, 0x0, 0x0, 0xf, (byte) 0xac, 0x2, 0x1, 0x0,
		};

		apInfo.wpa.keymic = new byte[] {
				(byte) 0xd5, 0x35, 0x53, (byte) 0x82, (byte) 0xb8, (byte) 0xa9, (byte) 0xb8, 0x6,
				(byte) 0xdc, (byte) 0xaf, (byte) 0x99, (byte) 0xcd, (byte) 0xaf, 0x56, 0x4e, (byte) 0xb6
		};

		apInfo.wpa.stmac = new byte[] {0x0, 0x13, 0x46, (byte) 0xfe, 0x32, 0xc};

		WpaKeyTester tester = new WpaKeyTester(apInfo);

		assertEquals(121, apInfo.wpa.eapol.length);
		
		Random r = new Random();
		long time = System.nanoTime();
		final int count = 1000;
		
		for (int i = 0; i < count; i++) {
			byte[] key = new byte[4 + r.nextInt(8)];
			r.nextBytes(key);
			tester.testKey(key);
		}
		
		time = System.nanoTime() - time;
		
		System.out.printf("%.3f keys per second\n", count / (time / 1000000000.0));
	}

}
